//Definicion de operaciones reutilizables entre egls

//Operaciones sobre directorios
operation dirGenerado(): String{  
   return "../../generado/";
}

operation dirStaticFiles():String{
 return "../../staticFiles/";
}

operation getAppName():String{
 	var app : java!Project:= java!Project.all.at(0);
 	return app.name;
}

operation dirProyecto(): String{  
   return dirGenerado() + getAppName() +"/";
}

operation dirSource(): String {
	return dirProyecto()+"src/";
}

operation dirPackage(packageName: String): String {
	return dirSource()+ packageName + "/";
}

operation dirPomXML(): String {
	return dirProyecto();
}

operation dirPersistenceXML(): String{
	return dirSource()+"META-INF/";
}

operation dirProject(): String {
	return dirProyecto();
}

operation dirClassPath(): String {
	return dirProyecto();
}

/**Classifier agrupa DataType y  Class asi que el nombre funciona para cualquiera
el tipo List es un caso especial*/
operation Classifier getTextRepresentationAsType():String {
	var type = self.name; 
	if (self.isTypeOf(java!ListType) )
	{
		type = "List<"+self.datatype.name+">";
	}
	return type;
}

/**
Retorna los parametros en linea, separados por coma
**/
operation Method getTextRepresentationForMethodParameters():String{
	var textParameters:String = "";
		for (parameter in self.methodParameters) {
			textParameters = textParameters + parameter.datatypeParameter.getTextRepresentationAsType()+" " +parameter.name;
			if (hasMore) {
				textParameters = textParameters + ", "; 	
			}
		}
	return textParameters;
}

operation Annotation getTextRepresentationForAnnotationKeyValues():String{
}