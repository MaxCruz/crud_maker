
operation java!Package entityManager() : java!Class {
	var entityManager = new java!Class;
	entityManager.name = "MarketPlace";
	entityManager.visibility = java!Visibility#public;
	
	// Add attributes
	entityManager.addEntityManagerAttributes();
	
	// Add persistence methods
	for (class : java!Class in self.classes) {
		entityManager.addEntityManagerMethods(class);
	}
	
	return entityManager;
}

/**
* This method add the attributes to the persistence manager class
*/
operation java!Class addEntityManagerAttributes() {
	// Add constant attribute for persistence unit
	var persistence = new java!Attribute;
	persistence.name = "PERSISTENCE_UNIT_NAME";
	persistence.visibility = java!Visibility#private;
	persistence.modifier = java!Modifier#staticfinal;
	persistence.value = "MarketPlace-Test";
	persistence.datatypeAttribute = typeMap.get(sql!DataType#varchar);
	self.attributes.add(persistence);
	
	// Add entity manager factory attribute
	var entityManagerFactory = new java!Attribute;
	entityManagerFactory.name = "emf";
	entityManagerFactory.visibility = java!Visibility#private;
	entityManagerFactory.modifier = java!Modifier#static;
	entityManagerFactory.datatypeAttribute = typeMap.get(entityManagerFactory.name);
	self.attributes.add(entityManagerFactory);
	
	// Add entity manager attribute
	var entityManager = new java!Attribute;
	entityManager.name = "em";
	entityManager.visibility = java!Visibility#private;
	entityManager.datatypeAttribute = typeMap.get(entityManager.name);
	self.attributes.add(entityManager);
}

operation java!Class addEntityManagerMethods(entity : java!Class) {
	// Get entitiy object list
	var getList = new java!Method;
	getList.name = "get" + entity.name + "s";
	getList.visibility = java!Visibility#public;
	getList.datatypeReturn = typeMap.get(entity.name.firstToLowerCase() + "List");
	self.methods.add(getList);
	
	// Add entitiy object 
	var add = new java!Method;
	add.name = "add" + entity.name;
	add.visibility = java!Visibility#public;
	// Add parameter 
	var addParameter = new java!Parameter;
	addParameter.name = entity.name.firstToLowerCase();
	addParameter.datatypeParameter = typeMap.get(entity.name.firstToLowerCase());
	add.methodParameters.add(addParameter);
	self.methods.add(add);
	
	// Find annotated ID
	var foundId = entity.findId();
	
	// Edit entity object
	var edit = new java!Method;
	edit.name = "edit" + entity.name;
	edit.visibility = java!Visibility#public;
	
	
	// Edit ID parameters
	for (attribute : java!Attribute in foundId) {
		var editParameterId = new java!Parameter;
		editParameterId.name = attribute.name;
		editParameterId.datatypeParameter = attribute.datatypeAttribute;
		edit.methodParameters.add(editParameterId);
	}
	// Edit object parameter 
	var editParameter = new java!Parameter;
	editParameter.name = entity.name.firstToLowerCase();
	editParameter.datatypeParameter = typeMap.get(entity.name.firstToLowerCase());
	edit.methodParameters.add(editParameter);
	self.methods.add(edit);
	
	
	
	
	
	//public void editCarrito(int id, String name, Client client)
	
	//public void deleteCarrito(int id)
	
	//public Carrito getCarrito(int id)
	
}

